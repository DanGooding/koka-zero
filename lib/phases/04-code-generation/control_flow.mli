open! Core
open! Import

(** [compile_conditional cond ~compile_true ~compile_false] generates a branch
    based on the value of [i1] [cond], to either the code of [compile_true] or
    [compile_false], then generates a phi node to combine their values *)
val compile_conditional
  :  cond_i1:Llvm.llvalue
  -> compile_true:(unit -> Ctl_repr.t Codegen.t)
  -> compile_false:(unit -> Ctl_repr.t Codegen.t)
  -> Ctl_repr.t Codegen.t

(** [compile_switch case ~table ~compile_default] builds a switch statement,
    branching on the valule of [case], to either a branch in [table], or the
    default. Each branch is given as [(tag, name, compile_branch)] where the
    code generated by [compile_branch] is jumped to if [case] matches [tag]. *)
val compile_switch
  :  Llvm.llvalue
  -> table:(Llvm.llvalue * string * (unit -> Ctl_repr.t Codegen.t)) list
  -> compile_default:(unit -> Ctl_repr.t Codegen.t)
  -> Ctl_repr.t Codegen.t
